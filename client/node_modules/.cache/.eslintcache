[{"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\index.js":"1","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\App.js":"2","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\theme.js":"3","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\Write.js":"4","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Title.js":"5","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Buttton.js":"6","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Desc.js":"7","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Table\\CollapsibleTable.js":"8","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Nav\\Nav.js":"9","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Nav\\src\\BasicModal.js":"10"},{"size":464,"mtime":1645077836906,"results":"11","hashOfConfig":"12"},{"size":625,"mtime":1645770998122,"results":"13","hashOfConfig":"12"},{"size":335,"mtime":1644562380740,"results":"14","hashOfConfig":"12"},{"size":2151,"mtime":1645770938360,"results":"15","hashOfConfig":"12"},{"size":326,"mtime":1645517400272,"results":"16","hashOfConfig":"12"},{"size":390,"mtime":1645435766446,"results":"17","hashOfConfig":"12"},{"size":589,"mtime":1645433175906,"results":"18","hashOfConfig":"12"},{"size":8987,"mtime":1645778411301,"results":"19","hashOfConfig":"12"},{"size":6600,"mtime":1645781745859,"results":"20","hashOfConfig":"12"},{"size":3016,"mtime":1645954649247,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"ajwvc7",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"25"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"25"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\index.js",[],[],["57","58"],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\App.js",[],[],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\theme.js",[],[],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\Write.js",["59"],[],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\nexport default function SimplePaper() {\r\n  const [hasError, setHasError] = React.useState(false)\r\n  const [title, setTitle] = React.useState([]);\r\n  const [description, setDescription] = React.useState([]);\r\n\r\n\r\n      const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        let data ={\r\n          title: title,\r\n          description: description,\r\n          user_id: 1\r\n        };\r\n        axios.post(\"http://localhost:8080/api\", JSON.stringify(data), {\r\n          headers: {\r\n            \"Content-Type\": `application/json`\r\n          }\r\n        }\r\n      ).then(res => console.log(res)).catch(err => setHasError(true))}\r\n    \r\n     \r\n      return (\r\n    <form onSubmit={onSubmit}>\r\n      <Paper elevation={3} \r\n        sx={{\r\n          display: 'flex',\r\n          flexBasise: 0,\r\n          flexDirection: 'row',\r\n          justifyContent: 'flex-start',\r\n          alignItems: 'center',\r\n          hight: '100vh'\r\n\r\n        }}\r\n      >\r\n        <Box sx={{\r\n          m: 2, \r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          justifyContent:'flex-start',\r\n          flexGrow: 3\r\n          }}>\r\n          <TextField id=\"outlined-basic\" label=\"제목\" name=\"title\" value={title} onChange={(e) => {setTitle(e.target.value)}} variant=\"outlined\" margin=\"normal\" sx={{width: '100%'}} />\r\n\r\n          <TextField\r\n            id=\"outlined-multiline-static\"\r\n            name=\"description\"\r\n            label=\"본문\"\r\n            multiline\r\n            rows={20}\r\n            margin=\"normal\"\r\n            value={description}\r\n            onChange={e => setDescription(e.target.value)}\r\n            sx={{width: '100%'}}\r\n          />\r\n          <Box sx={{\r\n            display: 'flex',\r\n            justifyContent:'center'\r\n            }}>\r\n            <Button type=\"submit\" variant=\"contained\">확인</Button>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Title.js",[],[],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Buttton.js",[],[],["60","61"],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Write\\src\\Desc.js",[],[],"C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Table\\CollapsibleTable.js",["62","63","64","65"],[],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport axios from 'axios';\r\nimport Accordion from '@mui/material/Accordion';\r\nimport AccordionDetails from '@mui/material/AccordionDetails';\r\nimport AccordionSummary from '@mui/material/AccordionSummary';\r\nimport Typography from '@mui/material/Typography';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\nfunction TablePaginationActions(props) {\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onPageChange(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onPageChange(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onPageChange(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleBackButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onPageChange: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const [state, setState] = React.useState([])\r\n  const [hasError, setHasError] = React.useState(false)\r\n  //Axios \r\n  React.useEffect(async () => {\r\n    await axios.get(\"http://localhost:8080/api\").then(res => setState(res.data.test)).catch(err => setHasError(true)).then(console.log())}, []);\r\n    \r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const rows = state;\r\n\r\n  //Accordion component\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  const [title, setTitle] = React.useState([]);\r\n  const [description, setDescription] = React.useState([]);\r\n \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let data ={\r\n      id: Number(e.target.id),\r\n      title: e.target.title.value,\r\n      description: e.target[2].value\r\n    };\r\n    axios.put(\"http://localhost:8080/api\", JSON.stringify(data), {\r\n      headers: {\r\n        \"Content-Type\": `application/json`\r\n      }\r\n    }\r\n  ).then(res => console.log(res)).catch(err => setHasError(true))}\r\n  \r\n  const handlingDelete = (e)=>{\r\n    axios.delete(\"http://localhost:8080/api\", {\r\n      headers: {\r\n      \"Content-Type\": `application/json`\r\n      },\r\n      data: {\r\n        id: Number(e.target.form.id)\r\n      }\r\n    }).then(res => console.log(res)).catch(err => setHasError(true))\r\n  }\r\n\r\n\r\n    \r\n\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n      <TableHead>\r\n          <TableRow>\r\n            <TableCell>\r\n              <Box sx={\r\n              {\r\n                display:'flex',\r\n                position: 'relative',\r\n                padding:0,\r\n                borderSize:'border-box'\r\n              }}>\r\n                <div>제목</div>\r\n                <div>시간</div>\r\n                <div>닉네임</div>\r\n              </Box>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        <TableRow >\r\n          <TableCell sx={{padding:0}}>\r\n          {(rowsPerPage > 0\r\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            : rows\r\n          ).map((state) => (\r\n            <Accordion key={state.id} expanded={expanded === state.id} onChange={handleChange(state.id)}>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1bh-content\"\r\n                id=\"panel1bh-header\"\r\n              >\r\n                <Typography sx={{ width: '33%', flexShrink: 0 }}>\r\n                  {state.title}\r\n                </Typography>\r\n                <Typography sx={{ width: '33%', flexShrink: 0 }}>\r\n                  {state.created}\r\n                </Typography>\r\n                <Typography sx={{ width: '33%', flexShrink: 0 }}>\r\n                  {state.nickname}\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n\r\n                <form id={state.id} onSubmit={handleSubmit}>\r\n                  <TextField \r\n                  id=\"outlined-basic\" \r\n                  name=\"title\" \r\n                  label=\"제목\" \r\n                  defaultValue={state.title} \r\n                  onChange={(e) => {\r\n                    setTitle(e.target.value)}} \r\n                  variant=\"outlined\" \r\n                  margin=\"normal\" \r\n                  color=\"success\"\r\n                  sx={{width: '100%'}} />               \r\n                  <TextField\r\n                    id=\"outlined-multiline-static\"\r\n                    name=\"desc\"\r\n                    label=\"본문\"\r\n                    defaultValue={state.description}\r\n                    onChange={(e)=>{\r\n                      setDescription(e.target.value);\r\n                    }}\r\n                    multiline\r\n                    rows={10}\r\n                    margin=\"normal\"\r\n                    color=\"success\"\r\n                    sx={{width: '100%'}}\r\n                  />\r\n                  <Button type=\"submit\" color=\"success\">수정</Button>\r\n                  <Button onClick={handlingDelete} color=\"error\">삭제</Button>\r\n                </form>\r\n     \r\n              </AccordionDetails>\r\n            </Accordion>\r\n          ))}\r\n          </TableCell>\r\n          </TableRow>\r\n          {emptyRows > 0 && (\r\n            <TableRow style={{ height: 53 * emptyRows }}>\r\n              <TableCell colSpan={6} />\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n        <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={3}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: {\r\n                    'aria-label': 'rows per page',\r\n                  },\r\n                  native: true,\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Nav\\Nav.js",["66"],[],"import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios';\r\n\r\nimport BasicModal from './src/BasicModal';\r\n\r\n// import Swal from 'sweetalert2'\r\n// import withReactContent from 'sweetalert2-react-content'\r\n\r\n\r\n// const MySwal = withReactContent(Swal)\r\n// const toggle = ()=>{\r\n//   MySwal.fire({\r\n//     title: 'Multiple inputs',\r\n//     didOpen: () => {\r\n//       // `MySwal` is a subclass of `Swal`\r\n//       //   with all the same instance & static methods\r\n//       MySwal.clickConfirm(axios.post(\"http://localhost:8080/login\",JSON.stringify(\"abc\"),{\r\n//         header:{\r\n//         \"Content-Type\": `application/json`\r\n//       }\r\n//     }))\r\n//     }\r\n//     }).then(() => {\r\n//     return MySwal.fire({\r\n//       html:\r\n//       '<input id=\"swal-input1\" class=\"swal2-input\">' +\r\n//       '<input id=\"swal-input2\" class=\"swal2-input\">',\r\n//     focusConfirm: false,\r\n//     preConfirm: () => {\r\n//       return [\r\n//         document.getElementById('swal-input1').value,\r\n//         document.getElementById('swal-input2').value\r\n//       ]}\r\n//     })\r\n//   })\r\n// }\r\n\r\n// const toggle = async ()=>{\r\n//   await MySwal.fire({\r\n//     title: 'Input email address',\r\n//     input: 'email',\r\n//     inputLabel: 'Your email address',\r\n//     inputPlaceholder: 'Enter your email address'\r\n//   })\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\r\n\r\nconst Nav = () => {\r\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n\r\n  const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.target);\r\n  };\r\n  const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.target)\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" sx={{mb:3}} style={{borderRadius:4}}>\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            마감일기\r\n          </Typography>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n            <IconButton\r\n              size=\"large\"\r\n              aria-label=\"account of current user\"\r\n              aria-controls=\"menu-appbar\"\r\n              aria-haspopup=\"true\"\r\n              onClick={handleOpenNavMenu}\r\n              color=\"inherit\"\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: 'block', md: 'none' },\r\n              }}\r\n            >\r\n              <Link to=\"/\" style={{textDecoration: 'none'}}>\r\n                <Button sx={{ my: 2, color: 'black', display: 'block' }}>\r\n                  홈\r\n                </Button>\r\n              </Link>\r\n              <Link to=\"/pages\" style={{textDecoration: 'none'}}>\r\n                <Button sx={{ my: 2, color: 'black', display: 'block' }}>\r\n                  글쓰기\r\n                </Button></Link>\r\n              <Link to=\"/board\" style={{textDecoration: 'none'}}>\r\n                <Button\r\n                sx={{ my: 2, color: 'black', display: 'block' }}>\r\n                게시판\r\n                </Button>\r\n              </Link>\r\n            </Menu>\r\n          </Box>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\r\n          >\r\n            마감일기\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n            <Link to=\"/\" style={{textDecoration: 'none'}}>\r\n              <Button sx={{ my: 2, color: 'white', display: 'block' }}>\r\n                홈\r\n              </Button>\r\n            </Link>\r\n            <Link to=\"/pages\" style={{textDecoration: 'none'}}>\r\n              <Button sx={{ my: 2, color: 'white', display: 'block' }}>\r\n                글쓰기\r\n              </Button>\r\n            </Link>\r\n            <Link to=\"/board\" style={{textDecoration: 'none'}}>\r\n              <Button sx={{ my: 2, color: 'white', display: 'block' }}>\r\n                게시판\r\n              </Button>\r\n            </Link>\r\n          </Box>\r\n          <Box sx={{ flexGrow: 0 }}>\r\n            <BasicModal/>\r\n            <Tooltip title=\"Open settings\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              sx={{ mt: '45px' }}\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n            >\r\n              {settings.map((setting) => (\r\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\r\n                  <Typography textAlign=\"center\">{setting}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default Nav;\r\n","C:\\Users\\82103\\OneDrive\\바탕 화면\\firstGit\\client\\src\\component\\Nav\\src\\BasicModal.js",["67"],[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":13,"column":10,"nodeType":"74","messageId":"75","endLine":13,"endColumn":18},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","replacedBy":"77"},{"ruleId":"72","severity":1,"message":"73","line":95,"column":10,"nodeType":"74","messageId":"75","endLine":95,"endColumn":18},{"ruleId":"78","severity":1,"message":"79","line":97,"column":19,"nodeType":"80","endLine":98,"endColumn":139},{"ruleId":"72","severity":1,"message":"81","line":122,"column":10,"nodeType":"74","messageId":"75","endLine":122,"endColumn":15},{"ruleId":"72","severity":1,"message":"82","line":123,"column":10,"nodeType":"74","messageId":"75","endLine":123,"endColumn":21},{"ruleId":"72","severity":1,"message":"83","line":15,"column":8,"nodeType":"74","messageId":"75","endLine":15,"endColumn":13},{"ruleId":"72","severity":1,"message":"84","line":5,"column":8,"nodeType":"74","messageId":"75","endLine":5,"endColumn":13},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'hasError' is assigned a value but never used.","Identifier","unusedVar",["85"],["86"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'title' is assigned a value but never used.","'description' is assigned a value but never used.","'axios' is defined but never used.","'Paper' is defined but never used.","no-global-assign","no-unsafe-negation"]